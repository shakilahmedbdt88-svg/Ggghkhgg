{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExponentSpeech","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":46,"index":103}}],"key":"G2eOEME+jLV6t/F9m3g24/ZyRUs=","exportNames":["*"]}},{"name":"./Speech.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":104},"end":{"line":3,"column":46,"index":150}}],"key":"SNz2Uxx+h7gZlVByUTOQkNQNiYw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"VoiceQuality\", {\n    enumerable: true,\n    get: function () {\n      return _Speech.VoiceQuality;\n    }\n  });\n  exports.getAvailableVoicesAsync = getAvailableVoicesAsync;\n  exports.isSpeakingAsync = isSpeakingAsync;\n  exports.maxSpeechInputLength = void 0;\n  exports.pause = pause;\n  exports.resume = resume;\n  exports.speak = speak;\n  exports.stop = stop;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExponentSpeech = _interopRequireDefault(require(_dependencyMap[2], \"./ExponentSpeech\"));\n  var _Speech = require(_dependencyMap[3], \"./Speech.types\");\n  const _CALLBACKS = {};\n  let _nextCallbackId = 1;\n  let _didSetListeners = false;\n  function _makeCallbackId() {\n    return String(_nextCallbackId++);\n  }\n  function _unregisterListenersIfNeeded() {\n    if (Object.keys(_CALLBACKS).length === 0) {\n      removeSpeakingListener('Exponent.speakingStarted');\n      removeSpeakingListener('Exponent.speakingWillSayNextString');\n      removeSpeakingListener('Exponent.speakingDone');\n      removeSpeakingListener('Exponent.speakingStopped');\n      removeSpeakingListener('Exponent.speakingError');\n      _didSetListeners = false;\n    }\n  }\n  function _registerListenersIfNeeded() {\n    if (_didSetListeners) return;\n    _didSetListeners = true;\n    setSpeakingListener('Exponent.speakingStarted', ({\n      id\n    }) => {\n      const options = _CALLBACKS[id];\n      if (options && options.onStart) {\n        options.onStart();\n      }\n    });\n    setSpeakingListener('Exponent.speakingWillSayNextString', ({\n      id,\n      charIndex,\n      charLength\n    }) => {\n      const options = _CALLBACKS[id];\n      if (options && options.onBoundary) {\n        // @ts-expect-error TODO(cedric): type is `SpeechEventCallback` while it should be `NativeBoundaryEventCallback` in this context, resulting in errors around `this` context\n        options.onBoundary({\n          charIndex,\n          charLength\n        });\n      }\n    });\n    setSpeakingListener('Exponent.speakingDone', ({\n      id\n    }) => {\n      const options = _CALLBACKS[id];\n      if (options && options.onDone) {\n        options.onDone();\n      }\n      delete _CALLBACKS[id];\n      _unregisterListenersIfNeeded();\n    });\n    setSpeakingListener('Exponent.speakingStopped', ({\n      id\n    }) => {\n      const options = _CALLBACKS[id];\n      if (options && options.onStopped) {\n        options.onStopped();\n      }\n      delete _CALLBACKS[id];\n      _unregisterListenersIfNeeded();\n    });\n    // @ts-expect-error TODO(cedric): Android does not provide the `error` parameter for the `speakingError` event, while iOS never uses this event at all\n    setSpeakingListener('Exponent.speakingError', ({\n      id,\n      error\n    }) => {\n      const options = _CALLBACKS[id];\n      if (options && options.onError) {\n        options.onError(new Error(error));\n      }\n      delete _CALLBACKS[id];\n      _unregisterListenersIfNeeded();\n    });\n  }\n  // @needsAudit\n  /**\n   * Speak out loud the text given options. Calling this when another text is being spoken adds\n   * an utterance to queue.\n   * @param text The text to be spoken. Cannot be longer than [`Speech.maxSpeechInputLength`](#speechmaxspeechinputlength).\n   * @param options A `SpeechOptions` object.\n   */\n  function speak(text, options = {}) {\n    const id = _makeCallbackId();\n    _CALLBACKS[id] = options;\n    _registerListenersIfNeeded();\n    _ExponentSpeech.default.speak(String(id), text, options);\n  }\n  // @needsAudit\n  /**\n   * Returns list of all available voices.\n   * @return List of `Voice` objects.\n   */\n  async function getAvailableVoicesAsync() {\n    if (!_ExponentSpeech.default.getVoices) {\n      throw new _expoModulesCore.UnavailabilityError('Speech', 'getVoices');\n    }\n    return _ExponentSpeech.default.getVoices();\n  }\n  //@needsAudit\n  /**\n   * Determine whether the Text-to-speech utility is currently speaking. Will return `true` if speaker\n   * is paused.\n   * @return Returns a Promise that fulfils with a boolean, `true` if speaking, `false` if not.\n   */\n  async function isSpeakingAsync() {\n    return _ExponentSpeech.default.isSpeaking();\n  }\n  // @needsAudit\n  /**\n   * Interrupts current speech and deletes all in queue.\n   */\n  async function stop() {\n    return _ExponentSpeech.default.stop();\n  }\n  // @needsAudit\n  /**\n   * Pauses current speech. This method is not available on Android.\n   */\n  async function pause() {\n    if (!_ExponentSpeech.default.pause) {\n      throw new _expoModulesCore.UnavailabilityError('Speech', 'pause');\n    }\n    return _ExponentSpeech.default.pause();\n  }\n  // @needsAudit\n  /**\n   * Resumes speaking previously paused speech or does nothing if there's none. This method is not\n   * available on Android.\n   */\n  async function resume() {\n    if (!_ExponentSpeech.default.resume) {\n      throw new _expoModulesCore.UnavailabilityError('Speech', 'resume');\n    }\n    return _ExponentSpeech.default.resume();\n  }\n  function setSpeakingListener(eventName, callback) {\n    const listenerCount = _ExponentSpeech.default.listenerCount(eventName);\n    if (listenerCount > 0) {\n      _ExponentSpeech.default.removeAllListeners(eventName);\n    }\n    _ExponentSpeech.default.addListener(eventName, callback);\n  }\n  function removeSpeakingListener(eventName) {\n    _ExponentSpeech.default.removeAllListeners(eventName);\n  }\n  // @needsAudit\n  /**\n   * Maximum possible text length acceptable by `Speech.speak()` method. It is platform-dependent.\n   * On iOS, this returns `Number.MAX_VALUE`.\n   */\n  const maxSpeechInputLength = exports.maxSpeechInputLength = _ExponentSpeech.default.maxSpeechInputLength || Number.MAX_VALUE;\n});","lineCount":173,"map":[[19,2,1,0],[19,6,1,0,"_expoModulesCore"],[19,22,1,0],[19,25,1,0,"require"],[19,32,1,0],[19,33,1,0,"_dependencyMap"],[19,47,1,0],[20,2,2,0],[20,6,2,0,"_ExponentSpeech"],[20,21,2,0],[20,24,2,0,"_interopRequireDefault"],[20,46,2,0],[20,47,2,0,"require"],[20,54,2,0],[20,55,2,0,"_dependencyMap"],[20,69,2,0],[21,2,3,0],[21,6,3,0,"_Speech"],[21,13,3,0],[21,16,3,0,"require"],[21,23,3,0],[21,24,3,0,"_dependencyMap"],[21,38,3,0],[22,2,5,0],[22,8,5,6,"_CALLBACKS"],[22,18,5,16],[22,21,5,19],[22,22,5,20],[22,23,5,21],[23,2,6,0],[23,6,6,4,"_nextCallbackId"],[23,21,6,19],[23,24,6,22],[23,25,6,23],[24,2,7,0],[24,6,7,4,"_didSetListeners"],[24,22,7,20],[24,25,7,23],[24,30,7,28],[25,2,8,0],[25,11,8,9,"_makeCallbackId"],[25,26,8,24,"_makeCallbackId"],[25,27,8,24],[25,29,8,27],[26,4,9,4],[26,11,9,11,"String"],[26,17,9,17],[26,18,9,18,"_nextCallbackId"],[26,33,9,33],[26,35,9,35],[26,36,9,36],[27,2,10,0],[28,2,11,0],[28,11,11,9,"_unregisterListenersIfNeeded"],[28,39,11,37,"_unregisterListenersIfNeeded"],[28,40,11,37],[28,42,11,40],[29,4,12,4],[29,8,12,8,"Object"],[29,14,12,14],[29,15,12,15,"keys"],[29,19,12,19],[29,20,12,20,"_CALLBACKS"],[29,30,12,30],[29,31,12,31],[29,32,12,32,"length"],[29,38,12,38],[29,43,12,43],[29,44,12,44],[29,46,12,46],[30,6,13,8,"removeSpeakingListener"],[30,28,13,30],[30,29,13,31],[30,55,13,57],[30,56,13,58],[31,6,14,8,"removeSpeakingListener"],[31,28,14,30],[31,29,14,31],[31,65,14,67],[31,66,14,68],[32,6,15,8,"removeSpeakingListener"],[32,28,15,30],[32,29,15,31],[32,52,15,54],[32,53,15,55],[33,6,16,8,"removeSpeakingListener"],[33,28,16,30],[33,29,16,31],[33,55,16,57],[33,56,16,58],[34,6,17,8,"removeSpeakingListener"],[34,28,17,30],[34,29,17,31],[34,53,17,55],[34,54,17,56],[35,6,18,8,"_didSetListeners"],[35,22,18,24],[35,25,18,27],[35,30,18,32],[36,4,19,4],[37,2,20,0],[38,2,21,0],[38,11,21,9,"_registerListenersIfNeeded"],[38,37,21,35,"_registerListenersIfNeeded"],[38,38,21,35],[38,40,21,38],[39,4,22,4],[39,8,22,8,"_didSetListeners"],[39,24,22,24],[39,26,23,8],[40,4,24,4,"_didSetListeners"],[40,20,24,20],[40,23,24,23],[40,27,24,27],[41,4,25,4,"setSpeakingListener"],[41,23,25,23],[41,24,25,24],[41,50,25,50],[41,52,25,52],[41,53,25,53],[42,6,25,55,"id"],[43,4,25,58],[43,5,25,59],[43,10,25,64],[44,6,26,8],[44,12,26,14,"options"],[44,19,26,21],[44,22,26,24,"_CALLBACKS"],[44,32,26,34],[44,33,26,35,"id"],[44,35,26,37],[44,36,26,38],[45,6,27,8],[45,10,27,12,"options"],[45,17,27,19],[45,21,27,23,"options"],[45,28,27,30],[45,29,27,31,"onStart"],[45,36,27,38],[45,38,27,40],[46,8,28,12,"options"],[46,15,28,19],[46,16,28,20,"onStart"],[46,23,28,27],[46,24,28,28],[46,25,28,29],[47,6,29,8],[48,4,30,4],[48,5,30,5],[48,6,30,6],[49,4,31,4,"setSpeakingListener"],[49,23,31,23],[49,24,31,24],[49,60,31,60],[49,62,31,62],[49,63,31,63],[50,6,31,65,"id"],[50,8,31,67],[51,6,31,69,"charIndex"],[51,15,31,78],[52,6,31,80,"charLength"],[53,4,31,91],[53,5,31,92],[53,10,31,97],[54,6,32,8],[54,12,32,14,"options"],[54,19,32,21],[54,22,32,24,"_CALLBACKS"],[54,32,32,34],[54,33,32,35,"id"],[54,35,32,37],[54,36,32,38],[55,6,33,8],[55,10,33,12,"options"],[55,17,33,19],[55,21,33,23,"options"],[55,28,33,30],[55,29,33,31,"onBoundary"],[55,39,33,41],[55,41,33,43],[56,8,34,12],[57,8,35,12,"options"],[57,15,35,19],[57,16,35,20,"onBoundary"],[57,26,35,30],[57,27,35,31],[58,10,36,16,"charIndex"],[58,19,36,25],[59,10,37,16,"charLength"],[60,8,38,12],[60,9,38,13],[60,10,38,14],[61,6,39,8],[62,4,40,4],[62,5,40,5],[62,6,40,6],[63,4,41,4,"setSpeakingListener"],[63,23,41,23],[63,24,41,24],[63,47,41,47],[63,49,41,49],[63,50,41,50],[64,6,41,52,"id"],[65,4,41,55],[65,5,41,56],[65,10,41,61],[66,6,42,8],[66,12,42,14,"options"],[66,19,42,21],[66,22,42,24,"_CALLBACKS"],[66,32,42,34],[66,33,42,35,"id"],[66,35,42,37],[66,36,42,38],[67,6,43,8],[67,10,43,12,"options"],[67,17,43,19],[67,21,43,23,"options"],[67,28,43,30],[67,29,43,31,"onDone"],[67,35,43,37],[67,37,43,39],[68,8,44,12,"options"],[68,15,44,19],[68,16,44,20,"onDone"],[68,22,44,26],[68,23,44,27],[68,24,44,28],[69,6,45,8],[70,6,46,8],[70,13,46,15,"_CALLBACKS"],[70,23,46,25],[70,24,46,26,"id"],[70,26,46,28],[70,27,46,29],[71,6,47,8,"_unregisterListenersIfNeeded"],[71,34,47,36],[71,35,47,37],[71,36,47,38],[72,4,48,4],[72,5,48,5],[72,6,48,6],[73,4,49,4,"setSpeakingListener"],[73,23,49,23],[73,24,49,24],[73,50,49,50],[73,52,49,52],[73,53,49,53],[74,6,49,55,"id"],[75,4,49,58],[75,5,49,59],[75,10,49,64],[76,6,50,8],[76,12,50,14,"options"],[76,19,50,21],[76,22,50,24,"_CALLBACKS"],[76,32,50,34],[76,33,50,35,"id"],[76,35,50,37],[76,36,50,38],[77,6,51,8],[77,10,51,12,"options"],[77,17,51,19],[77,21,51,23,"options"],[77,28,51,30],[77,29,51,31,"onStopped"],[77,38,51,40],[77,40,51,42],[78,8,52,12,"options"],[78,15,52,19],[78,16,52,20,"onStopped"],[78,25,52,29],[78,26,52,30],[78,27,52,31],[79,6,53,8],[80,6,54,8],[80,13,54,15,"_CALLBACKS"],[80,23,54,25],[80,24,54,26,"id"],[80,26,54,28],[80,27,54,29],[81,6,55,8,"_unregisterListenersIfNeeded"],[81,34,55,36],[81,35,55,37],[81,36,55,38],[82,4,56,4],[82,5,56,5],[82,6,56,6],[83,4,57,4],[84,4,58,4,"setSpeakingListener"],[84,23,58,23],[84,24,58,24],[84,48,58,48],[84,50,58,50],[84,51,58,51],[85,6,58,53,"id"],[85,8,58,55],[86,6,58,57,"error"],[87,4,58,63],[87,5,58,64],[87,10,58,69],[88,6,59,8],[88,12,59,14,"options"],[88,19,59,21],[88,22,59,24,"_CALLBACKS"],[88,32,59,34],[88,33,59,35,"id"],[88,35,59,37],[88,36,59,38],[89,6,60,8],[89,10,60,12,"options"],[89,17,60,19],[89,21,60,23,"options"],[89,28,60,30],[89,29,60,31,"onError"],[89,36,60,38],[89,38,60,40],[90,8,61,12,"options"],[90,15,61,19],[90,16,61,20,"onError"],[90,23,61,27],[90,24,61,28],[90,28,61,32,"Error"],[90,33,61,37],[90,34,61,38,"error"],[90,39,61,43],[90,40,61,44],[90,41,61,45],[91,6,62,8],[92,6,63,8],[92,13,63,15,"_CALLBACKS"],[92,23,63,25],[92,24,63,26,"id"],[92,26,63,28],[92,27,63,29],[93,6,64,8,"_unregisterListenersIfNeeded"],[93,34,64,36],[93,35,64,37],[93,36,64,38],[94,4,65,4],[94,5,65,5],[94,6,65,6],[95,2,66,0],[96,2,67,0],[97,2,68,0],[98,0,69,0],[99,0,70,0],[100,0,71,0],[101,0,72,0],[102,0,73,0],[103,2,74,7],[103,11,74,16,"speak"],[103,16,74,21,"speak"],[103,17,74,22,"text"],[103,21,74,26],[103,23,74,28,"options"],[103,30,74,35],[103,33,74,38],[103,34,74,39],[103,35,74,40],[103,37,74,42],[104,4,75,4],[104,10,75,10,"id"],[104,12,75,12],[104,15,75,15,"_makeCallbackId"],[104,30,75,30],[104,31,75,31],[104,32,75,32],[105,4,76,4,"_CALLBACKS"],[105,14,76,14],[105,15,76,15,"id"],[105,17,76,17],[105,18,76,18],[105,21,76,21,"options"],[105,28,76,28],[106,4,77,4,"_registerListenersIfNeeded"],[106,30,77,30],[106,31,77,31],[106,32,77,32],[107,4,78,4,"ExponentSpeech"],[107,27,78,18],[107,28,78,19,"speak"],[107,33,78,24],[107,34,78,25,"String"],[107,40,78,31],[107,41,78,32,"id"],[107,43,78,34],[107,44,78,35],[107,46,78,37,"text"],[107,50,78,41],[107,52,78,43,"options"],[107,59,78,50],[107,60,78,51],[108,2,79,0],[109,2,80,0],[110,2,81,0],[111,0,82,0],[112,0,83,0],[113,0,84,0],[114,2,85,7],[114,17,85,22,"getAvailableVoicesAsync"],[114,40,85,45,"getAvailableVoicesAsync"],[114,41,85,45],[114,43,85,48],[115,4,86,4],[115,8,86,8],[115,9,86,9,"ExponentSpeech"],[115,32,86,23],[115,33,86,24,"getVoices"],[115,42,86,33],[115,44,86,35],[116,6,87,8],[116,12,87,14],[116,16,87,18,"UnavailabilityError"],[116,52,87,37],[116,53,87,38],[116,61,87,46],[116,63,87,48],[116,74,87,59],[116,75,87,60],[117,4,88,4],[118,4,89,4],[118,11,89,11,"ExponentSpeech"],[118,34,89,25],[118,35,89,26,"getVoices"],[118,44,89,35],[118,45,89,36],[118,46,89,37],[119,2,90,0],[120,2,91,0],[121,2,92,0],[122,0,93,0],[123,0,94,0],[124,0,95,0],[125,0,96,0],[126,2,97,7],[126,17,97,22,"isSpeakingAsync"],[126,32,97,37,"isSpeakingAsync"],[126,33,97,37],[126,35,97,40],[127,4,98,4],[127,11,98,11,"ExponentSpeech"],[127,34,98,25],[127,35,98,26,"isSpeaking"],[127,45,98,36],[127,46,98,37],[127,47,98,38],[128,2,99,0],[129,2,100,0],[130,2,101,0],[131,0,102,0],[132,0,103,0],[133,2,104,7],[133,17,104,22,"stop"],[133,21,104,26,"stop"],[133,22,104,26],[133,24,104,29],[134,4,105,4],[134,11,105,11,"ExponentSpeech"],[134,34,105,25],[134,35,105,26,"stop"],[134,39,105,30],[134,40,105,31],[134,41,105,32],[135,2,106,0],[136,2,107,0],[137,2,108,0],[138,0,109,0],[139,0,110,0],[140,2,111,7],[140,17,111,22,"pause"],[140,22,111,27,"pause"],[140,23,111,27],[140,25,111,30],[141,4,112,4],[141,8,112,8],[141,9,112,9,"ExponentSpeech"],[141,32,112,23],[141,33,112,24,"pause"],[141,38,112,29],[141,40,112,31],[142,6,113,8],[142,12,113,14],[142,16,113,18,"UnavailabilityError"],[142,52,113,37],[142,53,113,38],[142,61,113,46],[142,63,113,48],[142,70,113,55],[142,71,113,56],[143,4,114,4],[144,4,115,4],[144,11,115,11,"ExponentSpeech"],[144,34,115,25],[144,35,115,26,"pause"],[144,40,115,31],[144,41,115,32],[144,42,115,33],[145,2,116,0],[146,2,117,0],[147,2,118,0],[148,0,119,0],[149,0,120,0],[150,0,121,0],[151,2,122,7],[151,17,122,22,"resume"],[151,23,122,28,"resume"],[151,24,122,28],[151,26,122,31],[152,4,123,4],[152,8,123,8],[152,9,123,9,"ExponentSpeech"],[152,32,123,23],[152,33,123,24,"resume"],[152,39,123,30],[152,41,123,32],[153,6,124,8],[153,12,124,14],[153,16,124,18,"UnavailabilityError"],[153,52,124,37],[153,53,124,38],[153,61,124,46],[153,63,124,48],[153,71,124,56],[153,72,124,57],[154,4,125,4],[155,4,126,4],[155,11,126,11,"ExponentSpeech"],[155,34,126,25],[155,35,126,26,"resume"],[155,41,126,32],[155,42,126,33],[155,43,126,34],[156,2,127,0],[157,2,128,0],[157,11,128,9,"setSpeakingListener"],[157,30,128,28,"setSpeakingListener"],[157,31,128,29,"eventName"],[157,40,128,38],[157,42,128,40,"callback"],[157,50,128,48],[157,52,128,50],[158,4,129,4],[158,10,129,10,"listenerCount"],[158,23,129,23],[158,26,129,26,"ExponentSpeech"],[158,49,129,40],[158,50,129,41,"listenerCount"],[158,63,129,54],[158,64,129,55,"eventName"],[158,73,129,64],[158,74,129,65],[159,4,130,4],[159,8,130,8,"listenerCount"],[159,21,130,21],[159,24,130,24],[159,25,130,25],[159,27,130,27],[160,6,131,8,"ExponentSpeech"],[160,29,131,22],[160,30,131,23,"removeAllListeners"],[160,48,131,41],[160,49,131,42,"eventName"],[160,58,131,51],[160,59,131,52],[161,4,132,4],[162,4,133,4,"ExponentSpeech"],[162,27,133,18],[162,28,133,19,"addListener"],[162,39,133,30],[162,40,133,31,"eventName"],[162,49,133,40],[162,51,133,42,"callback"],[162,59,133,50],[162,60,133,51],[163,2,134,0],[164,2,135,0],[164,11,135,9,"removeSpeakingListener"],[164,33,135,31,"removeSpeakingListener"],[164,34,135,32,"eventName"],[164,43,135,41],[164,45,135,43],[165,4,136,4,"ExponentSpeech"],[165,27,136,18],[165,28,136,19,"removeAllListeners"],[165,46,136,37],[165,47,136,38,"eventName"],[165,56,136,47],[165,57,136,48],[166,2,137,0],[167,2,138,0],[168,2,139,0],[169,0,140,0],[170,0,141,0],[171,0,142,0],[172,2,143,7],[172,8,143,13,"maxSpeechInputLength"],[172,28,143,33],[172,31,143,33,"exports"],[172,38,143,33],[172,39,143,33,"maxSpeechInputLength"],[172,59,143,33],[172,62,143,36,"ExponentSpeech"],[172,85,143,50],[172,86,143,51,"maxSpeechInputLength"],[172,106,143,71],[172,110,143,75,"Number"],[172,116,143,81],[172,117,143,82,"MAX_VALUE"],[172,126,143,91],[173,0,143,92],[173,3]],"functionMap":{"names":["<global>","_makeCallbackId","_unregisterListenersIfNeeded","_registerListenersIfNeeded","setSpeakingListener$argument_1","speak","getAvailableVoicesAsync","isSpeakingAsync","stop","pause","resume","setSpeakingListener","removeSpeakingListener"],"mappings":"AAA;ACO;CDE;AEC;CFS;AGC;oDCI;KDK;8DCC;KDS;iDCC;KDO;oDCC;KDO;kDCE;KDO;CHC;OKQ;CLK;OMM;CNK;OOO;CPE;OQK;CRE;OSK;CTK;OUM;CVK;AWC;CXM;AYC;CZE"}},"type":"js/module"}]}